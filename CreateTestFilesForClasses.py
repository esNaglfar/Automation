import sys
import os

if(len(sys.argv) > 2):
    project_path = sys.argv[1]

    try: 
        os.mkdir(project_path)
    except OSError as error: 
        print(error)

    try: 
        os.mkdir(project_path+"/Tests")
    except OSError as error: 
        print(error)    
        
    for arg in range(2,len(sys.argv)):
        testing_class = sys.argv[arg]
        print("Createting {0}.h and {0}.cpp files for {0} class...".format(testing_class))

        CPP_FILE_CONTENT = """
        //Autogenerated file by es.Naglfar

        #if (WITH_DEV_AUTOMATION_TESTS || WITH_PERF_AUTOMATION_TESTS)

        #define "CoreMinimal.h"
        #define "{}.h

        IMPLEMENT_SIMPLE_AUTOMATION_TEST(FClassTestName, "Level1.Level2.Level3", EAutomationTestFlags::ApplicationContextMask | EAutomationTestFlags::ProductFilter | EAutomationTestFlags::HighPriority)

        bool FClassTestName::RunTest(const FString& Parameters)
        {{
            AddInfo("Here is the info for testing step");

            return true;
        }}

        #endif 
        """.format(testing_class)

        HEADER_FILE_CONTENT = """
        //Autogenerated file by es.Naglfar
        #pragma once
        """

        header = open("{}/{}.h".format(project_path+"/Tests/",testing_class), "w")
        header.write(HEADER_FILE_CONTENT)
        header.close()

        cpp = open("{}/{}.cpp".format(project_path+"/Tests/",testing_class), "w")
        cpp.write(CPP_FILE_CONTENT)
        cpp.close

    print("\n... complete ...\n")
else:
    print("No parameters set. Enter, at least 2 parameters 1 - project path, 2+ - Test classes")